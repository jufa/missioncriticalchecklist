{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red92\green38\blue153;\red170\green13\blue145;\red46\green13\blue110;
\red63\green110\blue116;\red0\green116\blue0;\red38\green71\blue75;\red196\green26\blue22;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Oct 31 - declaring static class variables as opposed to instance variables without having to make an instance of the class:\
{\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/16330889"}}{\fldrslt http://stackoverflow.com/questions/16330889}}\
this pattern was used in ImportExport for checklists array.\
\
\
Oct 31 - where to put ivars: when to use class extensions, when to put variables in the implementation \{\}:\
{\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/13566862/where-to-put-ivars-in-modern-objective-c"}}{\fldrslt http://stackoverflow.com/questions/13566862/where-to-put-ivars-in-modern-objective-c}}\
\
Oct 30 - UIAlerts for import duplicate found options:\
\
\
\
Oct 30 - data imput from URL \
- using appdelegate to pop to the root viewcontroller if a openURL call is made to it. This is instead of putting NSNotification listeners on every subVC.\
- will it work when there is a modal popup??\
- is this really the best way?\
\
\
\
\
\
TODO:\
button images: {\field{\*\fldinst{HYPERLINK "http://robots.thoughtbot.com/designing-for-ios-taming-uibutton"}}{\fldrslt http://robots.thoughtbot.com/designing-for-ios-taming-uibutton}}\
\
\
Fetched results controller interaction with table view controller:\
http://www.informit.com/articles/article.aspx?p=2148655&seqNum=6\
\
Lessons learned: COREDATA\
+ put the coredata boilerplate in a separate class, not in the default appdelegate - this makes it easier to include in other classes\
+ it is handy to have a reference to the previous object past into the next object, whether parent/child or drilling down through hierarchical view controllers\
+ do data passing between transitional views on the prepareForSegue functions\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 + for every tableviewcontroller, overload the 
\f1\fs26 \CocoaLigature0 -(\cf2 NSFetchedResultsController\cf0 *) fetchedResultsController \{\}\CocoaLigature1  
\f0\fs24 with the setup of the fetchresults controller\
+ in transition from on tableview to the next, pass the data in the tvc1's prepareForSegue using this pattern:\
\
\
\pard\tx626\pardeftab626\pardirnatural

\f1\fs26 \cf0 \CocoaLigature0  		\cf2 NSIndexPath\cf0  *indexPath = [\cf3 self\cf0 .\cf2 tableView\cf0  \cf4 indexPathForCell\cf0 :sender];\
        \
        \cf5 Checklist\cf0 * checklist = (\cf5 Checklist\cf0 *)[\cf3 self\cf0 .\cf5 fetchedResultsController\cf0  \cf4 objectAtIndexPath\cf0 :indexPath];\
        \
        \cf5 ChecklistTableViewController\cf0  *cltvc = segue.\cf2 destinationViewController\cf0 ;\
        \
        \cf6 //pass data to checklist:\cf0 \
        [cltvc \cf7 loadChecklist\cf0 :checklist];\
        \
        \cf6 //segue will happen automatically at this point\
\
\
+loadChecklist on the receiving (child tvc) will have:	\
\
\
\cf0 -(\cf3 void\cf0 )loadChecklist:(\cf5 Checklist\cf0  *)checklist \{\
    \
    \cf3 self\cf0 .\cf5 checklistName\cf0  = checklist.\cf5 name\cf0 ;\
    \cf3 self\cf0 .\cf5 checklist\cf0  = checklist;\
    \
    \cf3 self\cf0 .\cf5 managedObjectContext\cf0  = [(\cf5 AppDelegate\cf0  *) [[\cf2 UIApplication\cf0  \cf4 sharedApplication\cf0 ] \cf4 delegate\cf0 ] \cf7 managedObjectContext\cf0 ]; //or preferably a global reference using a separate class\
\
\
    \cf2 NSError\cf0  *error = \cf3 nil\cf0 ;\
    \cf3 if\cf0 (![[\cf3 self\cf0  \cf7 fetchedResultsController\cf0 ] \cf4 performFetch\cf0 :&error])\{\
        \cf4 NSLog\cf0 (\cf8 @"Error in fetching checklist: %@"\cf0 ,error);\
        \cf4 abort\cf0 ();\
    \}\
\}\
\
When playing with the whole MVC concept and user interations: the pattern they seem to want to follow is:\
\
1) Detect user interaction with TVC\
- (\cf3 void\cf0 )tableView:(\cf2 UITableView\cf0  *)tableView commitEditingStyle:(\cf2 UITableViewCellEditingStyle\cf0 )editingStyle forRowAtIndexPath:(\cf2 NSIndexPath\cf0  *)indexPath\
\
2) Make changes to Managed object to reflect this based on the boilerplate TVC change listener methods\
 \cf5 ChecklistItem\cf0 * checklistItem = (\cf5 ChecklistItem\cf0 *)[\cf3 self\cf0 .\cf5 fetchedResultsController\cf0  \cf4 objectAtIndexPath\cf0 :indexPath];\
        [\cf3 self\cf0 .\cf5 managedObjectContext\cf0  \cf4 deleteObject\cf0 :checklistItem];\
\
\
3) Allow the boilerplate TVC detect-change-in-fetched-results-controller-output to update the view:\
-(\cf3 void\cf0 ) controllerWillChangeContent:(\cf2 NSFetchedResultsController\cf0  *)controller\{\
    [\cf3 self\cf0 .\cf2 tableView\cf0  \cf4 beginUpdates\cf0 ];   \
\}\
\
-(\cf3 void\cf0 ) controllerDidChangeContent:(\cf2 NSFetchedResultsController\cf0  *)controller \{\
    [\cf3 self\cf0 .\cf2 tableView\cf0  \cf4 endUpdates\cf0 ];\
\}\
-(\cf3 void\cf0 ) controller:(\cf2 NSFetchedResultsController\cf0  *)controller didChangeObject:(\cf3 id\cf0 )anObject atIndexPath:(\cf2 NSIndexPath\cf0  *)indexPath forChangeType:(\cf2 NSFetchedResultsChangeType\cf0 )type newIndexPath:(\cf2 NSIndexPath\cf0  *)newIndexPath\{\}\cf6 \
	}